// THIS FILE IS GENERATED BY THE EPOXY FFI BINDIGS GENERATOR VERSION 0.1.0.

// ignore_for_file: always_specify_types

import 'dart:ffi';

import '/Users/chinmaygarde/VersionControlled/engine/src/out/host_debug_unopt_arm64/gen/flutter/impeller/stator/renderer/renderer.epoxy.dart';
import '/Users/chinmaygarde/VersionControlled/engine/src/out/host_debug_unopt_arm64/gen/flutter/impeller/stator/objffi/objffi.epoxy.dart';

abstract class OBJFFIObject implements Finalizable {
  OBJFFIObject(this.peer) {
    objffi.Retain(peer);
    finalizer.attach(this, peer, detach: this);
  }

  bool isDisposed() {
    return peer == nullptr;
  }

  void dispose() {
    if (peer == nullptr) {
      return;
    }
    finalizer.detach(this);
    objffi.Release(peer);
    peer = nullptr;
  }

  Pointer<Void> peer;

  static var finalizer = NativeFinalizer(objffi.ReleasePTR);
}

final class Swapchain implements Finalizable {
  Swapchain(this.swapchain) {
    objffi.Retain(swapchain.cast());
    swapchainFinalizer.attach(this, swapchain.cast(), detach: this);
  }

  void dispose() {
    if (swapchain == nullptr) {
      return;
    }
    objffi.Release(swapchain.cast());
    swapchainFinalizer.detach(this);
    swapchain = nullptr;
  }

  FFISwapchainPointer swapchain;
  static var swapchainFinalizer = NativeFinalizer(objffi.ReleasePTR);
}

final class Context implements Finalizable {
  Context(this.context) {
    objffi.Retain(context.cast());
    contextFinalizer.attach(this, context.cast(), detach: this);
  }

  Swapchain copySwapchain() {
    return Swapchain(renderer.ContextSwapchainCopy(context));
  }

  void dispose() {
    if (context == nullptr) {
      return;
    }
    objffi.Release(context.cast());
    contextFinalizer.detach(this);
    context = nullptr;
  }

  FFIContextPointer context;
  static var contextFinalizer = NativeFinalizer(objffi.ReleasePTR);
}

final Context context = Context(renderer.GetGlobalContext());
final Swapchain swapchain = context.copySwapchain();

void main () {
  context.dispose();
}
