// THIS FILE IS GENERATED BY THE EPOXY FFI BINDIGS GENERATOR VERSION {{epoxy_version}}.

import 'dart:ffi';

{% for ns in namespaces %}

// {{ length(ns.enums) }} enum definition(s).
{% for enum in ns.enums %}

enum {{enum.name}} {
{% for member in enum.members %}
  {{member}},
{% endfor %}
}
{% endfor %}

// {{ length(ns.structs) }} struct definition(s).
{% for struct in ns.structs %}

final class {{struct.name}} extends Struct {
{% for var in struct.variables %}
  @{{to_c_type(var.type)}}()
  external {{to_dart_type(var.type)}} {{var.identifier}};
{% endfor %}
}
typedef {{struct.name}}Pointer = Pointer<{{struct.name}}>;
{% endfor %}

// {{ length(ns.opaques) }} opaque declaration(s).

{% for opaque in ns.opaques -%}

final class {{ opaque.name }} extends Opaque {}
typedef {{ opaque.name }}Pointer = Pointer<{{ opaque.name }}>;

{%  endfor -%}


// {{ length(ns.functions) }} function definition(s).

{% for fn in ns.functions %}

// {{ fn.name }} definition(s).

// {{ fn.name }} C Type definition(s).
typedef {{fn.name}}CType = NativeFunction<
{{to_c_type(fn.return_type)}}{% if fn.pointer_return %}Pointer{% endif %}

Function(
{% for arg in fn.arguments %}
{% if arg.is_enum %}
  Int64
{% else if arg.is_pointer and arg.is_primitive %}
  Pointer<{{to_c_type(arg.type)}}>
{% else %}
  {{to_c_type(arg.type)}}{% if arg.is_pointer %}Pointer{% endif %}
{% endif %}
  {{arg.identifier}}
  {% if not loop.is_last %},{% endif %}
{% endfor %}
)
>;

// {{ fn.name }} Dart Type definition(s).
typedef {{fn.name}}Type =
{{to_dart_type(fn.return_type)}}{% if fn.pointer_return %}Pointer{% endif %}

Function(
{% for arg in fn.arguments %}
{% if arg.is_pointer and arg.is_primitive %}
  Pointer<{{to_c_type(arg.type)}}>
{% else if arg.is_enum %}
  int
{% else %}
  {{to_dart_type(arg.type)}}{% if arg.is_pointer %}Pointer{% endif %}
{% endif %}
  {{arg.identifier}}
  {% if not loop.is_last %},{% endif %}
{% endfor %}
)
;

{% endfor %}


// Proc table setup for {{ camel_case(ns.name) }}.

final class {{ camel_case(ns.name) }}Procs {

  {{camel_case(ns.name)}}Procs(this.dylib);

  final DynamicLibrary dylib;

{% for fn in ns.functions %}
  late final Pointer<{{fn.name}}CType> {{fn.name}}PTR = dylib.lookup<{{fn.name}}CType>("EPOXY_BIND_{{fn.name}}");
  late final {{fn.name}}Type {{fn.name}} = {{fn.name}}PTR.asFunction();

{% endfor %}

} // final class {{ camel_case(ns.name) }}

final {{ ns.name }} = {{ camel_case(ns.name) }}Procs(DynamicLibrary.process());

{% endfor %}
