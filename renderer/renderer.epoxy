// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace renderer {

//------------------------------------------------------------------------------
enum PixelFormat {
  Unknown,
  A8UNormInt,
  R8UNormInt,
  R8G8UNormInt,
  R8G8B8A8UNormInt,
  R8G8B8A8UNormIntSRGB,
  B8G8R8A8UNormInt,
  B8G8R8A8UNormIntSRGB,
  R32G32B32A32Float,
  R16G16B16A16Float,
  B10G10R10XR,
  B10G10R10XRSRGB,
  B10G10R10A10XR,
  S8UInt,
  D24UnormS8Uint,
  D32FloatS8UInt,
}


//------------------------------------------------------------------------------
enum BlendFactor {
  Zero,
  One,
  SourceColor,
  OneMinusSourceColor,
  SourceAlpha,
  OneMinusSourceAlpha,
  DestinationColor,
  OneMinusDestinationColor,
  DestinationAlpha,
  OneMinusDestinationAlpha,
  SourceAlphaSaturated,
  BlendColor,
  OneMinusBlendColor,
  BlendAlpha,
  OneMinusBlendAlpha,
}

//------------------------------------------------------------------------------
enum CullMode {
  None,
  FrontFace,
  BackFace,
}

//------------------------------------------------------------------------------
enum BlendOperation {
  Add,
  Subtract,
  ReverseSubtract,
}

//------------------------------------------------------------------------------
enum CompareFunction {
  Never,
  Always,
  Less,
  Equal,
  LessEqual,
  Greater,
  NotEqual,
  GreaterEqual,
}

//------------------------------------------------------------------------------
enum StencilOperation {
  Keep,
  Zero,
  SetToReferenceValue,
  IncrementClamp,
  DecrementClamp,
  Invert,
  IncrementWrap,
  DecrementWrap,
}

//------------------------------------------------------------------------------
enum LoadAction {
  DontCare,
  Load,
  Clear,
}

//------------------------------------------------------------------------------
enum StoreAction {
  DontCare,
  Store,
  MultisampleResolve,
  StoreAndMultisampleResolve,
}

//------------------------------------------------------------------------------
enum IndexType {
  Unknown,
  Bit16,
  Bit32,
  None,
}

//------------------------------------------------------------------------------
enum SampleCount {
  One,
  Four,
}

//------------------------------------------------------------------------------
enum Facing {
  None,
  Front,
  Back,
  Both,
}

//------------------------------------------------------------------------------
enum WindingOrder {
  Clockwise,
  CounterClockwise,
}

//------------------------------------------------------------------------------
enum PrimitiveType {
  Triangle,
  TriangleStrip,
  Line,
  LineStrip,
  Point,
}

//------------------------------------------------------------------------------
enum PolygonMode {
  Fill,
  Line,
}

//------------------------------------------------------------------------------
opaque FFIContext {
  function SwapchainCopy() -> FFISwapchain*
  function PipelineLibraryCopy() -> FFIPipelineLibrary*
  function CommandBufferNew() -> FFICommandBuffer*
}

function GetGlobalContext() -> FFIContext*

//------------------------------------------------------------------------------
opaque FFICommandBuffer {
  function CreateRenderPassNew(FFIRenderTarget* render_target) -> FFIRenderPass*
  function Submit() -> bool
}

//------------------------------------------------------------------------------
opaque FFIRenderPass {
  function AddCommand(FFICommand* command) -> bool
  function EncodeCommands() -> bool
}

//------------------------------------------------------------------------------
opaque FFICommand {
  function SetPipeline(FFIPipeline* pipeline) -> bool
  function SetVertexBindings(FFICommandBindings* vertex_bindings) -> bool
  function SetFragmentBindings(FFICommandBindings* fragment_bindings) -> bool
  function SetIndexBuffer(FFIBufferView* index_buffer_view) -> bool
  function SetVertexCount(uint64 vertex_count) -> bool
  function SetIndexType(IndexType index_type) -> bool
  function SetStencilReference(uint32 stencil_reference) -> bool
  function SetBaseVertex(uint64 base_vertex) -> bool
  function SetViewport(FFIViewport* viewport) -> bool
  function SetScissor(FFIIRect* scissor_rect) -> bool
  function SetInstanceCount(uint64 instance_count) -> bool
}

function CommandNew() -> FFICommand*

//------------------------------------------------------------------------------
opaque FFICommandBindings

//------------------------------------------------------------------------------
opaque FFIPipeline

//------------------------------------------------------------------------------
opaque FFIPipelineLibrary

function PipelineLibraryGetPipelineCopy(FFIPipelineLibrary* pipeline_library, FFIPipelineDescriptor* pipeline_descriptor) -> FFIPipeline*

//------------------------------------------------------------------------------
opaque FFIPipelineDescriptor {
  function SetSampleCount(SampleCount count) -> bool
  function AddStage(FFIShaderFunction* shader_function) -> bool
  function SetVertexDescriptor(FFIVertexDescriptor* vertex_descriptor) -> bool
  function SetColorAttachmentDescriptor(FFIPipelineColorAttachmentDescriptor* pipeline_color_attachment_descriptor, uint32 index) -> bool
  function SetDepthAttachmentDescriptor(FFIPipelineDepthAttachmentDescriptor* pipeline_depth_attachment_descriptor) -> bool
  function SetStencilAttachmentDescriptor(FFIPipelineStencilAttachmentDescriptor* pipeline_stencil_attachment_descriptor, Facing facing) -> bool
  function SetCullMode(CullMode cull_mode) -> bool
  function SetWindingOrder(WindingOrder winding) -> bool
  function SetPrimitiveType(PrimitiveType primitive_type) -> bool
  function SetPolygonMode(PolygonMode polygon_mode) -> bool
}

function PipelineDescriptorNew() -> FFIPipelineDescriptor*

//------------------------------------------------------------------------------
opaque FFIShaderFunction

//------------------------------------------------------------------------------
opaque FFIVertexDescriptor

//------------------------------------------------------------------------------
opaque FFIPipelineColorAttachmentDescriptor {
  function SetPixelFormat(PixelFormat format) -> bool
  function SetBlendingEnabled(bool enabled) -> bool
  function SetSourceColorBlendFactor(BlendFactor factor) -> bool
  function SetColorBlendOperation(BlendOperation operation) -> bool
  function SetDestinationColorBlendFactor(BlendFactor factor) -> bool
  function SetSourceAlphaBlendFactor(BlendFactor factor) -> bool
  function SetAlphaBlendOperation(BlendOperation operation) -> bool
  function SetDestinationAlphaBlendFactor(BlendFactor factor) -> bool
  function SetColorWriteMask(uint64 write_mask) -> bool
}

function PipelineColorAttachmentDescriptorNew() -> FFIPipelineColorAttachmentDescriptor *

//------------------------------------------------------------------------------
opaque FFIPipelineDepthAttachmentDescriptor {
  function SetPixelFormat(PixelFormat format) -> bool
  function SetDepthCompareFunction(CompareFunction depth_compare) -> bool
  function SetDepthWriteEnabled(bool depth_write_enabled) -> bool
}

function PipelineDepthAttachmentDescriptorNew() -> FFIPipelineDepthAttachmentDescriptor *

//------------------------------------------------------------------------------
opaque FFIPipelineStencilAttachmentDescriptor {
  function SetPixelFormat(PixelFormat format) -> bool
  function SetStencilCompare(CompareFunction func) -> bool
  function SetStencilFailure(StencilOperation operation) -> bool
  function SetDepthFailure(StencilOperation operation) -> bool
  function SetDepthStencilPass(StencilOperation operation) -> bool
  function SetReadMask(uint32 read_mask) -> bool
  function SetWriteMask(uint32 write_mask) -> bool
}

function PipelineStencilAttachmentDescriptorNew() -> FFIPipelineStencilAttachmentDescriptor *

//------------------------------------------------------------------------------
opaque FFIBufferView

//------------------------------------------------------------------------------
opaque FFIHostBuffer {
  function EmplaceUniformDataNew(uint8* data, uint32 length, uint32 alignment) -> FFIBufferView*
  function EmplaceStorageBufferDataNew(uint8* data, uint32 length, uint32 alignment) -> FFIBufferView*
  function EmplaceDataNew(uint8* data, uint32 length, uint32 alignment) -> FFIBufferView*
}

function HostBufferNew() -> FFIHostBuffer*

//------------------------------------------------------------------------------
struct FFIViewport {
  double origin_x;
  double origin_y;
  double size_width;
  double size_height;
  double z_near;
  double z_far;
}

function FFIViewportAlloc() -> FFIViewport*
function FFIViewportFree(FFIViewport* viewport)

//------------------------------------------------------------------------------
struct FFIIRect {
  int64 origin_x;
  int64 origin_y;
  int64 size_width;
  int64 size_height;
}

function FFIIRectAlloc() -> FFIIRect*
function FFIIRectFree(FFIIRect* rect)

//------------------------------------------------------------------------------
opaque FFISwapchain {
  function NextDrawableNew() -> FFITexture*
  function PresentDrawable(FFITexture* texture) -> bool
}

//------------------------------------------------------------------------------
opaque FFITexture

//------------------------------------------------------------------------------
opaque FFIRenderTarget {
  function SetColorAttachment(FFIColorAttachment* color, uint32 index) -> bool
  function SetDepthAttachment(FFIDepthAttachment* depth) -> bool
  function SetStencilAttachment(FFIStencilAttachment* stencil) -> bool
}

function RenderTargetNew() -> FFIRenderTarget*

//------------------------------------------------------------------------------
opaque FFIColorAttachment {
  function SetTexture(FFITexture* texture) -> bool
  function SetResolveTexture(FFITexture* texture) -> bool
  function SetLoadAction(LoadAction load_action) -> bool
  function SetStoreAction(StoreAction store_action) -> bool
  function SetClearColor(FFIColor* color) -> bool
}

function ColorAttachmentNew() -> FFIColorAttachment*

//------------------------------------------------------------------------------
opaque FFIDepthAttachment {
  function SetTexture(FFITexture* texture) -> bool
  function SetResolveTexture(FFITexture* texture) -> bool
  function SetLoadAction(LoadAction load_action) -> bool
  function SetStoreAction(StoreAction store_action) -> bool
  function SetClearDepth(double clear_depth) -> bool
}

function DepthAttachmentNew() -> FFIDepthAttachment*

//------------------------------------------------------------------------------
opaque FFIStencilAttachment {
  function SetTexture(FFITexture* texture) -> bool
  function SetResolveTexture(FFITexture* texture) -> bool
  function SetLoadAction(LoadAction load_action) -> bool
  function SetStoreAction(StoreAction store_action) -> bool
  function SetClearStencil(int32 clear_stencil) -> bool
}

function StencilAttachmentNew() -> FFIStencilAttachment*

//------------------------------------------------------------------------------
struct FFIColor {
  float red;
  float green;
  float blue;
  float alpha;
}

function ColorAlloc() -> FFIColor*
function ColorFree(FFIColor* color)

} // namespace renderer
