// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace renderer {

opaque FFIContext

function GetGlobalContext() -> FFIContext*

opaque FFISwapchain

function ContextSwapchainCopy(FFIContext* context) -> FFISwapchain*

opaque FFITexture

function SwapchainNextDrawableNew(FFISwapchain* swapchain) -> FFITexture*
function SwapchainPresentDrawable(FFISwapchain* swapchain, FFITexture* texture) -> bool

opaque FFIRenderTarget

opaque FFIColorAttachment
opaque FFIDepthAttachment
opaque FFIStencilAttachment

function RenderTargetNew() -> FFIRenderTarget*

function RenderTargetSetColorAttachment(FFIRenderTarget* target, FFIColorAttachment* color, uint32 index) -> bool
function RenderTargetSetDepthAttachment(FFIRenderTarget* target, FFIDepthAttachment* depth) -> bool
function RenderTargetSetStencilAttachment(FFIRenderTarget* target, FFIStencilAttachment* stencil) -> bool

enum LoadAction {
  DontCare,
  Load,
  Clear,
}

enum StoreAction {
  DontCare,
  Store,
  MultisampleResolve,
  StoreAndMultisampleResolve,
}

struct Color {
  float red;
  float green;
  float blue;
  float alpha;
}

function ColorAlloc() -> Color*
function ColorFree(Color* color)

function ColorAttachmentSetTexture(FFIColorAttachment* color, FFITexture* texture) -> bool
function ColorAttachmentSetResolveTexture(FFIColorAttachment* color, FFITexture* texture) -> bool
function ColorAttachmentSetLoadAction(FFIColorAttachment* color, LoadAction load_action) -> bool
function ColorAttachmentSetStoreAction(FFIColorAttachment* color, StoreAction store_action) -> bool
function ColorAttachmentSetClearColor(FFIColorAttachment* color_attachment, Color* color) -> bool

} // namespace renderer
