// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace renderer {

//------------------------------------------------------------------------------
enum LoadAction {
  DontCare,
  Load,
  Clear,
}

//------------------------------------------------------------------------------
enum StoreAction {
  DontCare,
  Store,
  MultisampleResolve,
  StoreAndMultisampleResolve,
}

//------------------------------------------------------------------------------
enum IndexType {
  Unknown,
  Bit16,
  Bit32,
  None,
}

//------------------------------------------------------------------------------
enum SampleCount {
  One,
  Four,
}

//------------------------------------------------------------------------------
enum Facing {
  None,
  Front,
  Back,
  Both,
}

//------------------------------------------------------------------------------
enum WindingOrder {
  Clockwise,
  CounterClockwise,
}

//------------------------------------------------------------------------------
enum PrimitiveType {
  Triangle,
  TriangleStrip,
  Line,
  LineStrip,
  Point,
}

//------------------------------------------------------------------------------
enum PolygonMode {
  Fill,
  Line,
}

//------------------------------------------------------------------------------
opaque FFIContext

function ContextSwapchainCopy(FFIContext* context) -> FFISwapchain*
function ContextPipelineLibraryCopy(FFIContext* context) -> FFIPipelineLibrary*
function ContextCommandBufferNew(FFIContext* context) -> FFICommandBuffer*
function GetGlobalContext() -> FFIContext*

//------------------------------------------------------------------------------
opaque FFICommandBuffer

function CommandBufferCreateRenderPassNew(FFICommandBuffer* command_buffer, FFIRenderTarget* render_target) -> FFIRenderPass*
function CommandBufferSubmit(FFICommandBuffer* command_buffer) -> bool

//------------------------------------------------------------------------------
opaque FFIRenderPass

function RenderPassAddCommand(FFIRenderPass* render_pass, FFICommand* command) -> bool
function RenderPassEncodeCommands(FFIRenderPass* render_pass) -> bool

//------------------------------------------------------------------------------
opaque FFICommand

function CommandNew() -> FFICommand*
function CommandSetPipeline(FFICommand* command, FFIPipeline* pipeline) -> bool
function CommandSetVertexBindings(FFICommand* command, FFICommandBindings* vertex_bindings) -> bool
function CommandSetFragmentBindings(FFICommand* command, FFICommandBindings* fragment_bindings) -> bool
function CommandSetIndexBuffer(FFICommand* command, FFIBufferView* index_buffer_view) -> bool
function CommandSetVertexCount(FFICommand* command, uint64 vertex_count) -> bool
function CommandSetIndexType(FFICommand* command, IndexType index_type) -> bool
function CommandSetStencilReference(FFICommand* command, uint32 stencil_reference) -> bool
function CommandSetBaseVertex(FFICommand* command, uint64 base_vertex) -> bool
function CommandSetViewport(FFICommand* command, FFIViewport* viewport) -> bool
function CommandSetScissor(FFICommand* command, FFIIRect* scissor_rect) -> bool
function CommandSetInstanceCount(FFICommand* command, uint64 instance_count) -> bool

//------------------------------------------------------------------------------
opaque FFICommandBindings

//------------------------------------------------------------------------------
opaque FFIPipeline

//------------------------------------------------------------------------------
opaque FFIPipelineLibrary

function PipelineLibraryGetPipelineCopy(FFIPipelineLibrary* pipeline_library, FFIPipelineDescriptor* pipeline_descriptor) -> FFIPipeline*

//------------------------------------------------------------------------------
opaque FFIPipelineDescriptor

function PipelineDescriptorNew() -> FFIPipelineDescriptor*

function PipelineDescriptSetSampleCount(FFIPipelineDescriptor* pipeline_descriptor, SampleCount count) -> bool
function PipelineDescriptorAddStage(FFIPipelineDescriptor* pipeline_descriptor, FFIShaderFunction* shader_function) -> bool
function PipelineDescriptorSetVertexDescriptor(FFIPipelineDescriptor* pipeline_descriptor, FFIVertexDescriptor* vertex_descriptor) -> bool
function PipelineDescriptorSetColorAttachmentDescriptor(FFIPipelineDescriptor* pipeline_descriptor, FFIPipelineColorAttachmentDescriptor* pipeline_color_attachment_descriptor, uint32 index) -> bool
function PipelineDescriptorSetDepthAttachmentDescriptor(FFIPipelineDescriptor* pipeline_descriptor, FFIPipelineDepthAttachmentDescriptor* pipeline_depth_attachment_descriptor) -> bool
function PipelineDescriptorSetStencilAttachmentDescriptor(FFIPipelineDescriptor* pipeline_descriptor, FFIPipelineStencilAttachmentDescriptor* pipeline_stencil_attachment_descriptor, Facing facing) -> bool
function PipelineDescriptorSetCullMode(FFIPipelineDescriptor* pipeline_descriptor, Facing facing) -> bool
function PipelineDescriptorSetWindingOrder(FFIPipelineDescriptor* pipeline_descriptor, WindingOrder winding) -> bool
function PipelineDescriptorSetPrimitiveType(FFIPipelineDescriptor* pipeline_descriptor, PrimitiveType primitive_type) -> bool
function PipelineDescriptorSetPolygonMode(FFIPipelineDescriptor* pipeline_descriptor, PolygonMode polygon_mode) -> bool

//------------------------------------------------------------------------------
opaque FFIShaderFunction

//------------------------------------------------------------------------------
opaque FFIVertexDescriptor

//------------------------------------------------------------------------------
opaque FFIPipelineColorAttachmentDescriptor

//------------------------------------------------------------------------------
opaque FFIPipelineDepthAttachmentDescriptor

//------------------------------------------------------------------------------
opaque FFIPipelineStencilAttachmentDescriptor

//------------------------------------------------------------------------------
opaque FFIBufferView

//------------------------------------------------------------------------------
struct FFIViewport {
  double origin_x;
  double origin_y;
  double size_width;
  double size_height;
  double z_near;
  double z_far;
}

function FFIViewportAlloc() -> FFIViewport*
function FFIViewportFree(FFIViewport* viewport)

//------------------------------------------------------------------------------
struct FFIIRect {
  int64 origin_x;
  int64 origin_y;
  int64 size_width;
  int64 size_height;
}

function FFIIRectAlloc() -> FFIIRect*
function FFIIRectFree(FFIIRect* rect)

//------------------------------------------------------------------------------
opaque FFISwapchain

function SwapchainNextDrawableNew(FFISwapchain* swapchain) -> FFITexture*
function SwapchainPresentDrawable(FFISwapchain* swapchain, FFITexture* texture) -> bool

//------------------------------------------------------------------------------
opaque FFITexture

//------------------------------------------------------------------------------
opaque FFIRenderTarget

function RenderTargetNew() -> FFIRenderTarget*
function RenderTargetSetColorAttachment(FFIRenderTarget* target, FFIColorAttachment* color, uint32 index) -> bool
function RenderTargetSetDepthAttachment(FFIRenderTarget* target, FFIDepthAttachment* depth) -> bool
function RenderTargetSetStencilAttachment(FFIRenderTarget* target, FFIStencilAttachment* stencil) -> bool

//------------------------------------------------------------------------------
opaque FFIColorAttachment

function ColorAttachmentNew() -> FFIColorAttachment*
function ColorAttachmentSetTexture(FFIColorAttachment* color, FFITexture* texture) -> bool
function ColorAttachmentSetResolveTexture(FFIColorAttachment* color, FFITexture* texture) -> bool
function ColorAttachmentSetLoadAction(FFIColorAttachment* color, LoadAction load_action) -> bool
function ColorAttachmentSetStoreAction(FFIColorAttachment* color, StoreAction store_action) -> bool
function ColorAttachmentSetClearColor(FFIColorAttachment* color_attachment, FFIColor* color) -> bool

//------------------------------------------------------------------------------
opaque FFIDepthAttachment

function DepthAttachmentNew() -> FFIDepthAttachment*
function DepthAttachmentSetTexture(FFIDepthAttachment* depth, FFITexture* texture) -> bool
function DepthAttachmentSetResolveTexture(FFIDepthAttachment* depth, FFITexture* texture) -> bool
function DepthAttachmentSetLoadAction(FFIDepthAttachment* depth, LoadAction load_action) -> bool
function DepthAttachmentSetStoreAction(FFIDepthAttachment* depth, StoreAction store_action) -> bool
function DepthAttachmentSetClearDepth(FFIDepthAttachment* depth_attachment, double clear_depth) -> bool

//------------------------------------------------------------------------------
opaque FFIStencilAttachment

function StencilAttachmentNew() -> FFIStencilAttachment*
function StencilAttachmentSetTexture(FFIStencilAttachment* stencil, FFITexture* texture) -> bool
function StencilAttachmentSetResolveTexture(FFIStencilAttachment* stencil, FFITexture* texture) -> bool
function StencilAttachmentSetLoadAction(FFIStencilAttachment* stencil, LoadAction load_action) -> bool
function StencilAttachmentSetStoreAction(FFIStencilAttachment* stencil, StoreAction store_action) -> bool
function StencilAttachmentSetClearStencil(FFIStencilAttachment* stencil_attachment, int32 clear_stencil) -> bool

//------------------------------------------------------------------------------
struct FFIColor {
  float red;
  float green;
  float blue;
  float alpha;
}

function ColorAlloc() -> FFIColor*
function ColorFree(FFIColor* color)

} // namespace renderer
